image: docker:latest
services:
  - docker:dind

stages:
  - build
  - test
  - publish

include:
  - template: Code-Quality.gitlab-ci.yml

variables:
  CONTAINER_DEV_IMAGE: $CI_REGISTRY_IMAGE:build-$CI_COMMIT_SHA
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  PAALIAQ_RUN_ONCE: "true"

before_script:
  - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

application-build-release:
  stage: build
  script:
    - docker build -t "$CONTAINER_DEV_IMAGE" -f docker/Dockerfile .
    - docker push "$CONTAINER_DEV_IMAGE"
  rules:
    - if: '$CI_COMMIT_TAG' 

application-test-release:
  stage: test
  script:
    - docker network create testnetwork 
    - docker run -d --net testnetwork --name mongoc mongo
    - docker run -e PAALIAQ_RUN_ONCE --net testnetwork "$CONTAINER_DEV_IMAGE" config.test.json
  rules:
    - if: '$CI_COMMIT_TAG' 

application-publish-release:
  stage: publish
  script:
    - docker pull $CONTAINER_DEV_IMAGE
    - docker tag $CONTAINER_DEV_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG' 

application-build-dev:
  stage: build
  script:
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_REF_NAME
    - docker build -t "$CONTAINER_DEV_IMAGE" -f docker/Dockerfile .
    - docker push "$CONTAINER_DEV_IMAGE"
  rules:
    - if: '$CI_COMMIT_TAG == null' 

application-test-dev:
  stage: test
  script:
    - docker network create testnetwork 
    - docker run -d --net testnetwork --name mongoc mongo
    - docker run -e PAALIAQ_RUN_ONCE --net testnetwork "$CONTAINER_DEV_IMAGE" config.test.json
  rules:
    - if: '$CI_COMMIT_TAG == null' 

code_quality:
  stage: test
  artifacts:
    paths: [gl-code-quality-report.json]
